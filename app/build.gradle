
buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/groups/public' }
    }
    dependencies {
        classpath 'com.github.townsfolk:gradle-release:1.2'
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:2.0.3'
        classpath "org.flywaydb:flyway-gradle-plugin:3.1"
    }
}

apply plugin: 'scala'
apply plugin: 'application'
apply plugin: 'os-package-base'
apply plugin: 'flyway'

archivesBaseName = custom.parentProject + '-' + project.name

sourceCompatibility = '1.7'
mainClassName = "com.rackspace.prefs.WebApp"

// our package name for the RPM
def package_name = 'cloudfeeds-preferences-svc-app'
// our app name used by the rpm stuff
def app_name = 'preferences-service'
// clean version number with no -SNAPSHOT
def version_clean = version.minus("-SNAPSHOT")
// version number with -SNAPSHOT
def version_snapshot = version_clean + '-SNAPSHOT'
// path where our jars will be put on the system via the rpm/deb
def prefix_path = '/usr/share/' + app_name
// path where our configs will be put on the system via the rpm/deb
def config_path = '/etc/' + app_name
// user for the service, created via the preinstall.sh script
def app_user = 'prefssvc'
// group for the service, created via the preinstall.sh script
def app_group = 'prefssvc'

ext.scala_version = '2.10.4'
ext.scalatra_version = '2.3.0'
ext.jetty_version = '9.2.3.v20140905'

dependencies {
    compile 'org.scala-lang:scala-compiler:' + scala_version
    compile 'org.scala-lang:scala-library:' + scala_version
    compile 'org.scalatra:scalatra_2.10:' + scalatra_version
    compile 'org.scalatra:scalatra-scalate_2.10:' + scalatra_version
    compile 'org.scalatra:scalatra-json_2.10:2.3.0'
    compile 'org.json4s:json4s-jackson_2.10:3.2.11'
    compile 'com.typesafe.slick:slick_2.10:2.1.0'
    compile 'com.h2database:h2:1.4.182'
    compile 'com.mchange:c3p0:0.9.5'
    compile 'org.eclipse.jetty:jetty-webapp:' + jetty_version
    compile 'org.eclipse.jetty:jetty-servlet:' + jetty_version
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'javax.servlet:javax.servlet-api:3.0.1'
    compile 'com.nparry:orderly_2.10:1.0.6'
    compile 'com.github.fge:json-schema-validator:2.2.6'
    compile 'joda-time:joda-time:2.6'
    compile 'commons-validator:commons-validator:1.4.1'
    compile 'org.springframework:spring-web:4.1.6.RELEASE'
    compile('org.flywaydb:flyway-commandline:3.1') {
        transitive = false
    }
    compile 'org.flywaydb:flyway-core:3.1'
    compile 'com.rackspace.prefs.cloudfeeds:cloudfeeds-preferences-svc-db:1.2.2-SNAPSHOT'
    compile 'org.postgresql:postgresql:9.3-1102-jdbc41'
    testCompile 'org.scalatest:scalatest_2.10:2.1.7'
    testCompile 'org.scalatra:scalatra-scalatest_2.10:2.3.0'
}


// task to create one uber executable jar
task uberjar(type: Jar) {
    baseName = custom.parentProject + '-' + project.name
    from {
        sourceSets.main.output
    } {
        // For prod/staging deploy external file with db config must be provided
        exclude "c3p0-config.xml"
    }

    from configurations.runtime.asFileTree.files.collect { zipTree(it) }

    manifest {
        attributes 'Main-Class': 'com.rackspace.prefs.WebApp'
    }
}

// defaults for rpm/deb packaging
ospackage {
    os = LINUX
    packageName = package_name
    version = version_clean
    release = 1
    packageGroup = 'Application/System'
    packageDescription = 'This is the cloudfeeds preferences service application'
    url = 'http://github.com/rackerlabs/cloudfeeds-preferences-svc'

    // pre and post scriptlets
    preInstall file('src/main/resources/preinstall.sh')
    postInstall file('src/main/resources/postinstall.sh')

    directory(config_path, 755)
    directory(prefix_path, 755)
    directory(prefix_path + '/lib', 755)
    directory(prefix_path + '/bin', 755)

    // pull our configs and wadl from src/main/resources
    from('src/main/resources') {
        into config_path
        exclude 'preferences-service.init' // exclude init script
        exclude '*.sh' // exclude pre/post scripts
        // set permissions
        user app_user
        permissionGroup app_group
        fileMode 0644
        fileType CONFIG | NOREPLACE
    }

    into prefix_path

    // pull our init script
    from('src/main/resources') {
        into 'bin'
        include 'preferences-service.init'
        user app_user
        permissionGroup app_group
    }

    // collect our jars
    from('build/libs') {
        into 'lib'
        user app_user
        permissionGroup app_group
    }

    // check to see which jar got built for our symlink so the init script works
    def version_jar = package_name + '-' + version_clean + '.jar'
    // println version_jar

    // create a symlink to named <app_name>.jar to the versioned jar
    // FIXME: It should be noted that this won't work with -SNAPSHOT versions
    link(prefix_path + '/lib/' + app_name + '.jar', prefix_path + '/lib/' + version_jar)

}

// task to create RPM
task buildRpm(type: Rpm, dependsOn: 'uberjar') {
    // this task inherits defaults from the ospackage section

    baseName = custom.parentProject + '-' + project.name

    // the init script uses daemonize, require it
    requires('daemonize')

    // symlink for the init script
    link('/etc/init.d/' + app_name, prefix_path + '/bin/preferences-service.init')
}

artifacts {
    archives(buildRpm) {
        name   custom.parentProject + '-' + project.name
        type   'rpm'
        builtBy buildRpm
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            pom.groupId    = custom.group
            pom.artifactId = custom.parentProject + '-' + project.name
            pom.version    = project.version
            println("app: artifactId=" + pom.artifactId)
        }
    }
}

// 'gradle release' will also upload release to Nexus
uploadArchives.dependsOn   uberjar

flyway {
    url  = "jdbc:h2:file:${buildDir}/db/test/preferencesdb;MODE=PostgreSQL;IGNORECASE=TRUE"
    user = 'root'
    locations = [
            'classpath:sql/schema'
    ]
}

// Gradle plugin has dependency on testClasses which creates circular dependency if
// we were to have flyway tasks dependsOn testClasses. This is a small workaround/hack.
// https://github.com/flyway/flyway/issues/775
project.afterEvaluate {
    flywayClean.dependsOn -= testClasses
    flywayMigrate.dependsOn = [':db:build', processResources, processTestResources]
}

testClasses.dependsOn flywayClean, flywayMigrate
