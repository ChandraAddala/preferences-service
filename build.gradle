
buildscript {
    repositories {
        mavenLocal()
        maven { url "https://maven.research.rackspacecloud.com/content/repositories/snapshots/" }
        maven { url "https://maven.research.rackspacecloud.com/content/repositories/releases/" }
        mavenCentral()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/groups/public' }
    }
    dependencies {
        classpath 'com.rackspace.api.clients:veracode-client:1.3'
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7'
    }
}

allprojects {
    repositories {
        mavenLocal()
        maven { url "https://maven.research.rackspacecloud.com/content/repositories/snapshots/" }
        maven { url "https://maven.research.rackspacecloud.com/content/repositories/releases/" }
        mavenCentral()
        jcenter()
    }

    // If it doesn't have parent (i.e: it's the parent project itself),
    // then load the common.gradle from current directory. Subprojects
    // will load the common.gradle from the subprojects{} section. 
    if ( !project.parent ) {
        apply from: 'common.gradle'
    } 
    apply plugin:   'maven'

    group   = custom.group

    defaultTasks  'clean', 'build'

    uploadArchives {
        repositories {
            mavenDeployer {
                // nexusUsername and nexusPassword are passed in via -P option when gradle is run
                repository(url: "https://maven.research.rackspacecloud.com/content/repositories/releases/") {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
                snapshotRepository(url: "https://maven.research.rackspacecloud.com/content/repositories/snapshots/") {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
            }
        }
    }
}

subprojects {
    // this only works if the subprojects don't contain subprojects
    apply from: '../common.gradle'
}

apply plugin: 'release'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/groups/public' }
    }
    dependencies {
        classpath 'com.github.townsfolk:gradle-release:1.2'
    }
}

task writeNewPom << {
    pom {
        project {
            name          'Cloud Feeds Preferences Service'
            description   'A service that provides REST API access to set (and validate) / get a group of key/value property'
            url           'http://github.com/rackerlabs/cloudfeeds-preferences-svc'
            inceptionYear '2015'
        }
        scm {
            url        'https://github.com/rackerlabs/cloudfeeds-preferences-svc'
            connection 'scm:git:ssh://git@github.com/rackerlabs/cloudfeeds-preferences-svc.git'
        }
    }.writeTo("$buildDir/newpom.xml")
}

task test {
    dependsOn task(':db:test'), task(':app:test')
}

import com.rackspace.api.clients.veracode.DefaultVeracodeApiClient
import groovy.util.AntBuilder
import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*

task uploadVeracode(dependsOn: ':app:jar') {

    // some globals used throughout the script
    def veracodeUrl = 'https://analysiscenter.veracode.com/api/'
    def platform = 'Linux'
    def client = new DefaultVeracodeApiClient(veracodeUrl, veracodeUsername, 
                                              veracodePassword, System.out)
    def version = project.version

    // scanName is the version (minus -SNAPSHOT) and build number.
    // an example would be: 1.11.0-1
    def scanName = version - '-SNAPSHOT' + '-' + buildNumber
    println "Submitting scan for artifacts with name: " + scanName

    // get the application ID
    // the application must be pre-created from Veracode web UI
    def appId =  client.getAppId("Feeds Preferences Service")
    println "For applicationId: " + appId 
    println ""

    def http = new HTTPBuilder(veracodeUrl)
    http.auth.basic "${veracodeUsername}", "${veracodePassword}"

    // Step 1 - create a new scan
    println "Creating a scan build /api/4.0/createbuild.do" 
    def result = http.request(POST) {
        uri.path = '4.0/createbuild.do'
        uri.query = ['app_id': appId, 'version': scanName, 'platform': platform]
        response.success = { resp ->
            println 'createbuild.do completed successfully (status=${resp.status}): '
            println resp.entity.content.text
        }
        response.failure = { resp ->
            println 'createbuild.do failed (status=${resp.status}), reason:'
            println resp.entity.content.text
        }
    }

    // Step 2 - upload the file to scan
    // Note: I could not make the MultipartEntity to work with
    // HttpBuilder class. So I resorted to calling curl
    println "Uploading file ${projectDir}/app/libs/cloudfeeds-preferences-svc-app-${version}.jar to /api/4.0/uploadfile.do"
    def uploadCurl = ["curl", "--compressed",
                      "-u", "${veracodeUsername}:${veracodePassword}",
                      "-F", "app_id=${appId}",
                      "-F", "file=@${projectDir}/app/build/libs/cloudfeeds-preferences-svc-app-${version}.jar",
                      "-F", "save_as=cloudfeeds-preferences-svc-app.jar",
                      "${veracodeUrl}4.0/uploadfile.do"]
    def proc = uploadCurl.execute()
    Thread.start { System.err << proc.err }
    proc.waitFor() 

    // Step 3 - submit the prescan with auto_scan=true
    // prescan takes a few minutes, the actual scan will
    // be kicked off automatically after prescan is done
    println "Submitting /api/4.0/beginprescan.do"
    http.request(GET) {
        uri.path = '4.0/beginprescan.do'
        uri.query = ['app_id': appId, 'auto_scan': true]
        response.success = { resp ->
            println 'prescan sent successfully (status=${resp.status}):'
            println resp.entity.content.text
        }
        response.failure = { resp ->
            println 'prescan failed (status=${resp.status}), reason:'
            println resp.entity.content.text
        }
    }
}

artifacts {
    def app_artifact = custom.parentProject + '-app-' + project.version.minus('-SNAPSHOT') + '-1.noarch.rpm'
    archives file: file('app/build/distributions/' + app_artifact), name: app_artifact, type: 'rpm', classifier: 'app'

    def db_artifact = custom.parentProject + '-db-' + project.version.minus('-SNAPSHOT') + '.zip'
    archives file: file('db/build/distributions/' + db_artifact), name: db_artifact, type: 'zip', classifier: 'db'
}

uploadArchives {
    repositories {
        mavenDeployer {
            pom.groupId    = project.group
            pom.artifactId = project.name
            pom.version    = project.version.minus('-SNAPSHOT')
            //println('main: groupId=' + pom.groupId)
            //println('main: artifactId=' + pom.artifactId)
            //println('main: version=' + pom.version)
        }
    }
}

createReleaseTag.dependsOn uploadArchives

release {
    failOnPublishNeeded = false
    failOnCommitNeeded = false
    failOnUnversionedFiles = false
    tagPrefix = 'cloudfeeds-preferences-svc'
    // for testing on dev boxes
    //git.requireBranch = ''
}

